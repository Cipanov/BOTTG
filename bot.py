import logging
import os
from io import BytesIO
import time

from openai import OpenAI
from telegram import Update
from telegram.constants import ChatAction
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ----------
# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
OPENAI_MODEL = os.environ.get("OPENAI_MODEL", "gpt-4o-mini")

if not OPENAI_API_KEY or not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã OPENAI_API_KEY –∏/–∏–ª–∏ TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render")

client = OpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)
log = logging.getLogger("tg-bot")

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. "
    "–û—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
)

# ---------- –•–µ–ª–ø–µ—Ä—ã ----------
async def send_typing(ctx: ContextTypes.DEFAULT_TYPE, chat_id: int):
    try:
        await ctx.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    except Exception:
        pass

async def generate_text_reply(user_text: str) -> str:
    response = client.chat.completions.create(
        model=OPENAI_MODEL,
        messages=[
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": user_text}
        ],
        temperature=0.6,
        max_tokens=600,
    )
    return response.choices[0].message.content.strip()

async def transcribe_voice(bytes_data: bytes, filename: str = "voice.ogg") -> str:
    f = BytesIO(bytes_data)
    f.name = filename
    transcript = client.audio.transcriptions.create(
        model="whisper-1",
        file=f,
    )
    return transcript.text.strip()

# ---------- –•–µ–Ω–¥–ª–µ—Ä—ã ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–±–æ—Ç –Ω–∞ OpenAI. –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ üéôÔ∏è"
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = (update.message.text or "").strip()
    if not user_text:
        return
    await send_typing(context, update.effective_chat.id)
    try:
        reply = await generate_text_reply(user_text)
        await update.message.reply_text(reply)
    except Exception as e:
        log.exception("OpenAI error")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    voice = update.message.voice
    if not voice:
        return
    await send_typing(context, update.effective_chat.id)
    try:
        file = await context.bot.get_file(voice.file_id)
        bio = BytesIO()
        await file.download(out=bio)
        audio_bytes = bio.getvalue()
        text = await transcribe_voice(audio_bytes)
        reply = await generate_text_reply(text)
        await update.message.reply_text(f"üé§ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}\n\nüí¨ –û—Ç–≤–µ—Ç: {reply}")
    except Exception as e:
        log.exception("Voice handling error")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

# ---------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ----------
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        application.add_handler(MessageHandler(filters.VOICE, handle_voice))
        
        log.info("Starting bot...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()
        
    except Exception as e:
        log.error(f"Bot failed with error: {e}")
        log.info("Restarting in 10 seconds...")
        time.sleep(10)
        main()  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º

if __name__ == "__main__":
    main()
